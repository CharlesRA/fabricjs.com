I"p<h2 id="fabricjs-objects-type-and-hierarchy">Fabric.js objects type and hierarchy</h2>

<h3 id="objects-types">Objects types</h3>

<p>Fabric.js offers a series of Objects out of the box:</p>

<ul>
  <li>Canvas is the main container of your Fabric.js app:
    <ul>
      <li><a href="/docs/fabric.StaticCanvas.html">fabric.StaticCanvas</a>: the plain basic canvas</li>
      <li><a href="/docs/fabric.Canvas.html">fabric.Canvas</a>: the previous canvas, but with an interactive layer</li>
    </ul>
  </li>
  <li>Shapes are objects, items that you can add in your canvas:
    <ul>
      <li><a href="/docs/fabric.Rect.html">fabric.Rect</a></li>
      <li><a href="/docs/fabric.Circle.html">fabric.Circle</a></li>
      <li><a href="/docs/fabric.Triangle.html">fabric.Triangle</a></li>
      <li><a href="/docs/fabric.Ellipse.html">fabric.Ellipse</a></li>
      <li><a href="/docs/fabric.Polygon.html">fabric.Polygon</a></li>
      <li><a href="/docs/fabric.Polyline.html">fabric.Polyline</a></li>
      <li><a href="/docs/fabric.Line.html">fabric.Line</a></li>
      <li><a href="/docs/fabric.Path.html">fabric.Path</a></li>
      <li><a href="/docs/fabric.Image.html">fabric.Image</a></li>
      <li><a href="/docs/fabric.Text.html">fabric.Text</a></li>
      <li><a href="/docs/fabric.IText.html">fabric.IText</a></li>
      <li><a href="/docs/fabric.Textbox.html">fabric.Textbox</a></li>
    </ul>
  </li>
  <li>Containers of items
    <ul>
      <li><a href="/docs/fabric.Group.html">fabric.Group</a></li>
      <li><a href="/docs/fabric.ActiveSelection.html">fabric.ActiveSelection</a></li>
    </ul>
  </li>
  <li>Gradient and Patterns are values you can assign to Shapes fill and strokes
    <ul>
      <li><a href="/docs/fabric.Pattern.html">fabric.Pattern</a></li>
      <li><a href="/docs/fabric.Gradient.html">fabric.Gradient</a></li>
    </ul>
  </li>
  <li>Filters classes
    <ul>
      <li><a href="/docs/fabric.Image.filters.BlendColor.html">fabric.Image.filters.BlendColor</a></li>
      <li><a href="/docs/fabric.Image.filters.Blur.html">fabric.Image.filters.Blur</a></li>
      <li><a href="/docs/fabric.Image.filters.Brightness.html">fabric.Image.filters.Brightness</a></li>
      <li><a href="/docs/fabric.Image.filters.ColorMatrix.html">fabric.Image.filters.ColorMatrix</a></li>
      <li><a href="/docs/fabric.Image.filters.ComposedFilter.html">fabric.Image.filters.ComposedFilter</a></li>
      <li><a href="/docs/fabric.Image.filters.Contrast.html">fabric.Image.filters.Contrast</a></li>
      <li><a href="/docs/fabric.Image.filters.Convolute.html">fabric.Image.filters.Convolute</a></li>
      <li><a href="/docs/fabric.Image.filters.Grayscale.html">fabric.Image.filters.Grayscale</a></li>
      <li><a href="/docs/fabric.Image.filters.HueRotation.html">fabric.Image.filters.HueRotation</a></li>
      <li><a href="/docs/fabric.Image.filters.Invert.html">fabric.Image.filters.Invert</a></li>
      <li><a href="/docs/fabric.Image.filters.Noise.html">fabric.Image.filters.Noise</a></li>
      <li><a href="/docs/fabric.Image.filters.Pixelate.html">fabric.Image.filters.Pixelate</a></li>
      <li><a href="/docs/fabric.Image.filters.RemoveColor.html">fabric.Image.filters.RemoveColor</a></li>
      <li><a href="/docs/fabric.Image.filters.Resize.html">fabric.Image.filters.Resize</a></li>
      <li><a href="/docs/fabric.Image.filters.Saturate.html">fabric.Image.filters.Saturate</a></li>
    </ul>
  </li>
  <li>Brushes classes, to be assigned to the canvas freeDrawingBrush to support free drawing</li>
</ul>

<h3 id="hierarchy_and_inheritance">Objects Hierarchy and Inheritance</h3>

<p>Fabric objects do not just exist independent of each other. They form a very precise hierarchy.</p>

<p>Most of the objects inherit from a root <code>fabric.Object</code>. <code>fabric.Object</code> pretty much represents a 2-dimensional shape, positioned in 2-dimensional canvas plane. It’s an entity that has left/top and width/height properties, as well as a slew of other graphic characteristics. Those properties that we saw on objects like fill, stroke, angle, opacity, flip*, etc. are common to all Fabric objects that inherit from <code>fabric.Object</code>.</p>

<p>Rect, Circle, Triangle, Ellipse, Polyline, Line, Path, Image and Text inherit directly from fabric.Object.</p>

<p>Polygon is an extension of Polyline.</p>

<p>Textbox is an extension of IText that extends from Text.</p>

<p>This inheritance allows us to define methods on <code>fabric.Object</code> and share them among all child “classes”. For example, if you wanted to have <code>getAngleInRadians</code> method on all objects, you would simply create it on <code>fabric.Object.prototype</code>:</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">fabric</span><span class="p">.</span><span class="nb">Object</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAngleInRadians</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
<span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">angle</span><span class="dl">'</span><span class="p">)</span> <span class="o">/</span> <span class="mi">180</span> <span class="o">*</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">var</span> <span class="nx">rect</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">fabric</span><span class="p">.</span><span class="nx">Rect</span><span class="p">({</span> <span class="na">angle</span><span class="p">:</span> <span class="mi">45</span> <span class="p">});</span>
<span class="nx">rect</span><span class="p">.</span><span class="nx">getAngleInRadians</span><span class="p">();</span> <span class="c1">// 0.785...</span>

<span class="kd">var</span> <span class="nx">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">fabric</span><span class="p">.</span><span class="nx">Circle</span><span class="p">({</span> <span class="na">angle</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="na">radius</span><span class="p">:</span> <span class="mi">10</span> <span class="p">});</span>
<span class="nx">circle</span><span class="p">.</span><span class="nx">getAngleInRadians</span><span class="p">();</span> <span class="c1">// 0.523...</span>

<span class="nx">circle</span> <span class="k">instanceof</span> <span class="nx">fabric</span><span class="p">.</span><span class="nx">Circle</span><span class="p">;</span> <span class="c1">// true</span>
<span class="nx">circle</span> <span class="k">instanceof</span> <span class="nx">fabric</span><span class="p">.</span><span class="nb">Object</span><span class="p">;</span> <span class="c1">// true</span>
</code></pre></div></div>

<p>As you can see, method immediately becomes available on all instances.</p>

<p>While child “classes” inherit from <code>fabric.Object</code>, they often also define their own methods and properties. For example, <code>fabric.Circle</code> needs to have “radius”; property. And <code>fabric.Image</code>, which we’ll look at in a moment, needs to have <code>setElement</code> methods for setting HTML <img /> element from which image instance originates.</p>

<p>Working with prototypes to obtain custom rendering and behaviour is very common for advanced projects.
Also creating entirely new classes that have a custom behaviour is possible.</p>

<p>Read <a href="/fabric-intro-part-2">Part 2</a>.</p>
:ET